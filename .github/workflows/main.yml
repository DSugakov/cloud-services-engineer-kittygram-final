name: Kittygram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt

      - name: Lint backend with flake8
        run: flake8 backend/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Test frontend
        run: |
          cd frontend
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print debug info
        run: |
          echo "DEBUG: Preparing to deploy with SSH"
          echo "Host: ${{ secrets.REMOTE_HOST }}"
          echo "User: ${{ secrets.REMOTE_USER }}"
          echo "Key length check: ${{ secrets.REMOTE_SSH_KEY != '' && 'OK' || 'EMPTY' }}"
          
      - name: Check SSH key format
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SSH_KEY }}" | base64 -d > ~/.ssh/deploy_key 2>/dev/null || { echo "❌ Ошибка декодирования Base64"; exit 1; }
          chmod 600 ~/.ssh/deploy_key
          
          # Проверка длины файла
          FILE_SIZE=$(wc -c < ~/.ssh/deploy_key)
          echo "Размер файла ключа: $FILE_SIZE байт"
          
          # Проверка формата ключа с выводом всего содержимого для отладки
          echo "Проверка формата SSH-ключа:"
          echo "--- Начало содержимого ключа (первые 50 символов) ---"
          head -c 50 ~/.ssh/deploy_key | cat -A
          echo
          echo "--- Конец содержимого ---"
          
          if grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/deploy_key && grep -q "END OPENSSH PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "✅ Ключ имеет правильный формат OpenSSH"
          elif grep -q "BEGIN RSA PRIVATE KEY" ~/.ssh/deploy_key && grep -q "END RSA PRIVATE KEY" ~/.ssh/deploy_key; then
            echo "✅ Ключ имеет правильный формат RSA"
          else
            echo "❌ Ключ имеет неправильный формат, проверьте секрет REMOTE_SSH_KEY"
            exit 1
          fi

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SSH_KEY }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          
          # Создаем конфиг SSH для упрощения отладки
          cat > ~/.ssh/config << EOF
          Host deployment
            HostName ${{ secrets.REMOTE_HOST }}
            User ${{ secrets.REMOTE_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            IdentitiesOnly yes
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          
          echo "Тестирование SSH-соединения:"
          ssh -v deployment "echo 'Соединение успешно! Текущий каталог:' && pwd"

      - name: Deploy to server
        run: |
          if ssh deployment "echo 'Hello world!'"; then
            echo "SSH connection successful, continuing with deployment"
            
            ssh deployment "cd ~/cloud-services-engineer-kittygram-final/ && \
              echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' > .env && \
              echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env && \
              echo 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' >> .env && \
              echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env && \
              echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env && \
              echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env && \
              echo 'DEBUG=${{ secrets.DEBUG }}' >> .env && \
              echo 'ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}' >> .env"
            
            scp -i ~/.ssh/deploy_key docker-compose.production.yml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/cloud-services-engineer-kittygram-final/docker-compose.production.yml
            
            ssh deployment "cd ~/cloud-services-engineer-kittygram-final/ && \
              docker-compose -f docker-compose.production.yml pull && \
              docker-compose -f docker-compose.production.yml up -d --remove-orphans && \
              docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate && \
              docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput"
          else
            echo "SSH connection failed"
            exit 1

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Kittygram deployment successful!"