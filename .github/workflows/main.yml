name: Kittygram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt

      - name: Lint backend with flake8
        run: flake8 backend/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Test frontend
        run: |
          cd frontend
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client
          mkdir -p ~/.ssh

      - name: Set up SSH
        run: |
          echo "Настройка SSH ключа..."
          echo "${{ secrets.REMOTE_SSH_KEY }}" | base64 -d > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
          echo "SSH ключ настроен. Содержимое known_hosts:"
          cat ~/.ssh/known_hosts

      - name: Debug SSH setup
        run: |
          ls -la ~/.ssh/
          file ~/.ssh/deploy_key
          echo "Проверка формата ключа:"
          cat ~/.ssh/deploy_key | head -n 2

      - name: Simple SSH test
        run: |
          set -ex
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "hostname && whoami && echo 'Тестовое соединение успешно'"

      - name: Deploy to server
        run: |
          SSH_KEY="~/.ssh/deploy_key"
          SSH_CMD="ssh -v -i $SSH_KEY -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}"
          SCP_CMD="scp -v -i $SSH_KEY -o StrictHostKeyChecking=no"
          
          echo "Выполняем простую команду для проверки..."
          $SSH_CMD "echo 'SSH connection test'"
          
          echo "Проверка наличия Docker..."
          $SSH_CMD "if ! command -v docker &> /dev/null; then
            echo 'Docker не установлен. Устанавливаем...'
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker \$USER
            echo 'Docker установлен успешно'
          else
            echo 'Docker уже установлен'
          fi"
          echo "Проверка Docker завершена"
          
          echo "Проверка наличия Docker Compose..."
          $SSH_CMD "if ! command -v docker-compose &> /dev/null; then
            echo 'Docker Compose не установлен. Устанавливаем...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo 'Docker Compose установлен успешно'
          else
            echo 'Docker Compose уже установлен'
          fi"
          echo "Проверка Docker Compose завершена"
          
          echo "Создание директории проекта..."
          $SSH_CMD "mkdir -p ~/cloud-services-engineer-kittygram-final/"
          echo "Директория создана"
          
          echo "Создание .env файла..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'POSTGRES_USER=${{ secrets.POSTGRES_USER }}' > .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'POSTGRES_DB=${{ secrets.POSTGRES_DB }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'DB_PORT=${{ secrets.DB_PORT }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'DEBUG=${{ secrets.DEBUG }}' >> .env"
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && echo 'ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}' >> .env"
          echo ".env файл создан"
          
          echo "Копирование docker-compose.production.yml..."
          $SCP_CMD docker-compose.production.yml ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/cloud-services-engineer-kittygram-final/docker-compose.production.yml
          echo "Файл скопирован"
          
          echo "Проверка версии docker-compose..."
          $SSH_CMD "docker-compose --version"
          
          echo "Запуск docker-compose pull..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml pull"
          echo "Pull завершен"
          
          echo "Запуск контейнера postgres..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml up -d postgres"
          echo "Postgres запущен"
          
          echo "Запуск контейнера backend..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml up -d backend"
          echo "Backend запущен"
          
          echo "Запуск контейнера frontend..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml up -d frontend"
          echo "Frontend запущен"
          
          echo "Запуск контейнера gateway..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml up -d gateway"
          echo "Gateway запущен"
          
          echo "Применение миграций..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate"
          echo "Миграции применены"
          
          echo "Сбор статики..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput"
          echo "Статика собрана"
          
          echo "Проверка статуса контейнеров..."
          $SSH_CMD "cd ~/cloud-services-engineer-kittygram-final/ && docker-compose -f docker-compose.production.yml ps"
          echo "Развертывание завершено успешно"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Kittygram deployment successful!"