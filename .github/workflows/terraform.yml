name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  YC_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}
  YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create service account key file
        run: |
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY_FILE }}' > key.json
          chmod 600 key.json

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_S3_FORCE_PATH_STYLE: 'true'

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          terraform plan \
            -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var="service_account_key_file=key.json" \
            -var="storage_access_key=${{ secrets.YC_STORAGE_ACCESS_KEY }}" \
            -var="storage_secret_key=${{ secrets.YC_STORAGE_SECRET_KEY }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_S3_FORCE_PATH_STYLE: 'true'

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          terraform apply -auto-approve \
            -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var="service_account_key_file=key.json" \
            -var="storage_access_key=${{ secrets.YC_STORAGE_ACCESS_KEY }}" \
            -var="storage_secret_key=${{ secrets.YC_STORAGE_SECRET_KEY }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_S3_FORCE_PATH_STYLE: 'true'

      - name: Get outputs
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "VM External IP: $(terraform output -raw vm_external_ip)"
          echo "Kittygram URL: $(terraform output -raw kittygram_url)"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve \
            -var="cloud_id=${{ secrets.YC_CLOUD_ID }}" \
            -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
            -var="service_account_key_file=key.json" \
            -var="storage_access_key=${{ secrets.YC_STORAGE_ACCESS_KEY }}" \
            -var="storage_secret_key=${{ secrets.YC_STORAGE_SECRET_KEY }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_STORAGE_SECRET_KEY }}
          AWS_DEFAULT_REGION: ru-central1
          AWS_S3_FORCE_PATH_STYLE: 'true'

      - name: Cleanup
        if: always()
        run: |
          rm -f key.json 