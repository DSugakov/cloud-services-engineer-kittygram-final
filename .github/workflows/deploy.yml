on:
  push:
    branches:
      - main

jobs:
  backend_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres_kittygram_user
          POSTGRES_PASSWORD: postgres_kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Test with flake8 and django tests
        env:
          POSTGRES_USER: postgres_kittygram_user
          POSTGRES_PASSWORD: postgres_kittygram_password
          POSTGRES_DB: kittygram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  build_and_push_backend:
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./backend/
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:build-${{ github.run_number }}

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_and_push_frontend:
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:build-${{ github.run_number }}

  build_and_push_gateway:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./nginx/
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:build-${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend
      - build_and_push_frontend
      - build_and_push_gateway
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Create .build_info file
        run: |
          echo "BUILD_ID=${{ github.run_number }}" > .build_info
          echo "COMMIT=${{ github.sha }}" >> .build_info
          echo "DEPLOY_DATE=$(date)" >> .build_info
      - name: Create .env file
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.REMOTE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
      
      - name: Prepare project dir on server
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            mkdir -p "$HOME/cloud-services-engineer-kittygram-final/nginx"
            chmod -R u+rwX,go+rX "$HOME/cloud-services-engineer-kittygram-final"
          EOF
          
      - name: Copy files to server
        run: |
          # Копирование в директорию проекта
          scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -v docker-compose.production.yml .build_info .env ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/home/${{ secrets.REMOTE_USER }}/cloud-services-engineer-kittygram-final/
          tar -C nginx -czf - . | ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} 'tar -xzf - -C /home/${{ secrets.REMOTE_USER }}/cloud-services-engineer-kittygram-final/nginx/'
          
      - name: Deploy on server
        run: |
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            echo "Очистка системы..."
            sudo docker system prune -af
            sudo npm cache clean --force
            sudo apt clean
            sudo journalctl --vacuum-time=1d
            
            echo "Деплой приложения..."
            cd ~/cloud-services-engineer-kittygram-final/
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            
            echo "Применение миграций и сбор статики..."
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
            
            echo "Проверка статуса контейнеров..."
            sudo docker compose -f docker-compose.production.yml ps
            
            echo "Сохранение информации о сборке..."
            cat .build_info
          EOF

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🚀 Kittygram успешно развернут в продакшн!
            
            📋 Сборка: #${{ github.run_number }}
            👤 Автор: ${{ github.actor }}
            💬 Коммит: ${{ github.event.commits[0].message }}
            🔗 Подробнее: https://github.com/${{ github.repository }}/commit/${{ github.sha }}