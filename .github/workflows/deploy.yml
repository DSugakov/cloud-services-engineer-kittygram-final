name: Kittygram Deploy

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt

      - name: Lint backend with flake8
        run: flake8 backend/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Test frontend
        run: |
          cd frontend
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build and push gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Deploy to remote server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            cd ~/kittygram/cloud-services-engineer-kittygram-final

            # Создаем .env файл
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "DEBUG=False" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env

            # Скачиваем docker-compose.production.yml
            wget https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.production.yml -O docker-compose.production.yml

            # Обновляем образы и запускаем контейнеры
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml up -d --remove-orphans

            # Ожидаем запуск контейнеров
            sleep 30

            # Выполняем миграции и собираем статику
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput

            # Показываем статус контейнеров
            docker-compose -f docker-compose.production.yml ps

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Kittygram deployment successful!
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            Application is available at: http://${{ secrets.REMOTE_HOST }}:9000