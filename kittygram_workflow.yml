name: Kittygram CI/CD

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r backend/requirements.txt

      - name: Lint backend with flake8
        run: flake8 backend/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Test frontend
        run: |
          cd frontend
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Generate build ID
        id: build-id
        run: |
          echo "BUILD_ID=${{ github.run_number }}" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:build-${{ env.BUILD_ID }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:build-${{ env.BUILD_ID }}

      - name: Build and push gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest
            ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:build-${{ env.BUILD_ID }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cat > .env << 'EOL'
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ secrets.DEBUG }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          EOL
    
      - name: Create build info file
        run: |
          cat > .build_info << 'EOL'
          BUILD_ID=${{ github.run_number }}
          DEPLOY_DATE=$(date)
          EOL

      - name: Deploy to server via SSH
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: ".env,.build_info,docker-compose.production.yml"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: "~/cloud-services-engineer-kittygram-final/"
          EXCLUDE: ".git/,.github/,.gitignore"

      - name: Execute remote commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            cd ~/cloud-services-engineer-kittygram-final/
            
            echo "Запуск docker-compose pull..."
            docker-compose -f docker-compose.production.yml pull
            
            echo "Запуск контейнеров..."
            docker-compose -f docker-compose.production.yml up -d
            
            echo "Применение миграций..."
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            
            echo "Сбор статики..."
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            
            echo "Очистка неиспользуемых Docker образов..."
            docker image prune -a -f --filter "until=24h"
            
            echo "Проверка статуса контейнеров..."
            docker-compose -f docker-compose.production.yml ps

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🚀 Kittygram deployment successful!
            Build ID: ${{ github.run_number }}
            Commit: ${{ github.sha }}
            Repository: ${{ github.repository }}
            Deployed by: ${{ github.actor }}